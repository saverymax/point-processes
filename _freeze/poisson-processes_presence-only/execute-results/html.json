{
  "hash": "d80db04f5953cf242a1778c60c43bc53",
  "result": {
    "markdown": "# Data generation and Modelling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(viridis)\nlibrary(hrbrthemes)\nlibrary(cmdstanr) \nlibrary(bayesplot)\nlibrary(spatstat)\nlibrary(dplyr)\nlibrary(tidyr)\n\nsource(\"presence_only_functions.R\")\nsource(\"surface_functions.R\")\n```\n:::\n\n## Implementation\n\nThe previous sections discussed the theoretical and practical aspects of data generation. We now proceed to implement the data generation procedure. We first generate observations at each site and create plots of observed intensities, bias, and counts. We then fit a Poisson Point Process to the generated data.\n\nWe create a ring-shaped environment based on two correlated covariates and generate PO points accordingly.\n\n::: {.cell}\n\n```{.r .cell-code}\narea_D <- 100\nk <- 20\nsites <- k^2\n# Parameter values somewhere around Fithian 2015.\nalpha <- -2 \nbeta <- 2\ngamma <- -2\ndelta <- 0.5\nparams <- list(alpha=alpha, beta=beta, gamma=gamma, delta=delta)\naux_cor <- 0.7\ngrid_points <- get_sampling_surface_donut(k)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/data-gen-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngrid_points <- get_bias_surface_correlated(grid_points, aux_cor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Correlation between X and Z\"\n          [,1]      [,2]\n[1,] 1.0000000 0.8303608\n[2,] 0.8303608 1.0000000\n```\n:::\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/data-gen-2.png){width=672}\n:::\n\n```{.r .cell-code}\nsites <- sites/4\ngrid_points <- grid_points %>% dplyr::filter(x<(k/2)+1, y<(k/2)+1)\n# Filter for only a quarter of the grid.\n# If we filter, we need to change the total sites as well\n# Need distances for LGCP\ndistance_mat <- as.matrix(dist(grid_points[,1:2]))\ndata_reps <- 1\ncorr_matrix <- specify_corr(grid_points[,1:2])\ngp_bool <- F\nsim_data <- generate_ppp_data_r(grid_points, params, sites, data_reps, corr_matrix, gp_bool, area_D)\nY_positive_indices <- which(sim_data$Y>0)\nstopifnot(sum(sim_data$Y[Y_positive_indices]) == nrow(sim_data$coordinates))\nsim_data$Y_coords\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           x         y\n1   8.204742  3.441798\n2  10.212834  2.584480\n3  10.420535  2.983140\n4   9.795428  2.895966\n5  10.341213  2.798000\n6   6.115568  4.092758\n7   6.240295  3.941619\n8   6.793444  4.076728\n9   8.395169  3.617602\n10  5.275811  4.643587\n11  3.692623  6.169257\n12  3.504758  5.510190\n13  3.487666  7.330929\n14  2.738335  9.478151\n15  3.162934  9.129503\n16  2.751518  9.417020\n17  3.433457  9.049825\n18  2.607020  8.731577\n19  2.547061  9.678732\n20  3.225903 10.286323\n21  3.218867  9.520077\n```\n:::\n\n```{.r .cell-code}\ngrid_points[Y_positive_indices,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    x  y     aux_x     aux_z\n28  8  3 1.7474542 0.8777793\n30 10  3 2.3263479 2.1064489\n36  6  4 1.9218166 1.7486643\n37  7  4 1.7189159 0.7003788\n38  8  4 0.9405371 1.9725961\n45  5  5 2.2578390 1.1104440\n54  4  6 1.9218166 1.3349295\n63  3  7 1.0454213 1.1007557\n83  3  9 2.2578390 2.1378423\n93  3 10 2.3263479 2.1190466\n```\n:::\n:::\n\nThe above output shows the exact location of the generated points and the associated $x$ and $z$ covariate values.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use the final generation iteration\np <- ggplot(grid_points, aes(x, y, fill=sim_data$lambda[data_reps,])) + \n  geom_tile() +\n  scale_fill_viridis(discrete=FALSE) +\n  ggtitle(\"Generated intensity per site\")\nprint(p)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/gen-plot-1.png){width=672}\n:::\n\n```{.r .cell-code}\np <- ggplot(grid_points, aes(x, y, fill=sim_data$bias[data_reps,])) + \n  geom_tile() +\n  scale_fill_viridis(discrete=FALSE) +\n  ggtitle(\"Generated bias per site\")\nprint(p)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/gen-plot-2.png){width=672}\n:::\n\n```{.r .cell-code}\nthinned_intensity <- sim_data$lambda[data_reps,]*sim_data$bias[data_reps,]\np <- ggplot() +\n  geom_tile(grid_points, mapping=aes(x, y, fill=thinned_intensity, width=1, height=1), alpha=.6) + \n  scale_fill_viridis(discrete=FALSE, name=\"L*b\") +\n  ggtitle(\"Generated thinning per site, including generated (or observed) individuals\") +\n  geom_point(data=sim_data$Y_coords, mapping=aes(x=x, y=y), size=3, col=\"white\") +\n  theme(panel.grid.minor = element_line(colour=\"white\")) +\n  scale_y_continuous(breaks = seq(0, 20, 1)) +\n  scale_x_continuous(breaks = seq(0, 20, 1)) \nprint(p)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/gen-plot-3.png){width=672}\n:::\n:::\n\nThe above plots show the PO points and the ring-shaped surface.\n\n\n\n\nNext we fit the Thinned Nonhomogenous Poisson Process model in Stan. We can make a few observations about this model. First, examine the likelihood: \n$$L(\\lambda|Y) = \\prod^{N}_{i=1}\\frac{\\lambda_i^{n_i}\\exp[-\\lambda_i]}{n_i!}$$. This is made using  the assumption that the counts at sites $s_i$ are distributed following a poisson process with mean $\\lambda$. This assumption allows for a simpler specification of the likelihood, since we can use the poisson distribution. The setting of $|A|=1$ allows us to make this assumption, as we do not need to multiple the intensity parameter $\\lambda$ by the area in the model.\n\nThe next sections of code fitting and diagnosing the poisson process model in Stan, using the generated data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_string <- stan_poisson_process\nwrite(model_string, model_path)\n# data_reps is 1 here so just use the first index\ndata = list(N = sites, X = grid_points$aux_x, Z = grid_points$aux_z, y = sim_data$Y[data_reps,])\nmodel <- cmdstan_model(model_path)\nfit <- model$sample(data=data, seed=13, chains=3, iter_sampling=2000, iter_warmup=200)\n```\n:::\n\nThe above code fits the table. We next examine the fit.\n\n::: {.cell}\n\n```{.r .cell-code}\nfit$summary(variables=c('alpha', 'beta', 'gamma', 'delta'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 Ã— 10\n  variable  mean median    sd   mad      q5   q95  rhat ess_bulk ess_tail\n  <chr>    <dbl>  <dbl> <dbl> <dbl>   <dbl> <dbl> <dbl>    <dbl>    <dbl>\n1 alpha    -2.16  -2.28 7.20  7.26  -13.4    9.90  1.00    1719.    2078.\n2 beta      1.46   1.41 0.548 0.540   0.610  2.40  1.00    2290.    3092.\n3 gamma    -2.70  -2.65 7.21  7.24  -14.8    8.61  1.00    1720.    1969.\n4 delta     1.36   1.35 0.571 0.581   0.471  2.35  1.00    2434.    2902.\n```\n:::\n:::\n\nFrom the table above, we can observe that the parameters $\\beta$ and $\\delta$ have been recovered. However, due to the correlation of $\\alpha$ and $\\gamma$, only the sum $\\alpha+\\gamma$ can be correctly identified. Our \"true\" sum of was equal to -4, and we can see the estimate here is $~4.7$, which is reasonable given we incorporate priors and are estimating correlated parameters. The correlation between the two can be observed in the scatter plots below, as well as in the wide confidence interval of the posterior, relative to the other parameters.\n\n## Diagnostics\n\nHere we check goodness of fit and Posterior Predictive Checks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#! eval: true\nparam_vec <- c('alpha', 'gamma', 'beta', 'delta')\nposterior <- fit$draws(variables=param_vec)\ncolor_scheme_set(\"mix-blue-pink\")\np_trace <- mcmc_trace(posterior,  pars = c(\"alpha\", \"beta\", \"gamma\", \"delta\"),\n                      facet_args = list(nrow = 2, labeller = label_parsed))\nprint(p_trace + facet_text(size = 15))\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/diag-check-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot_title <- ggtitle(paste(\"Posterior distributions, with means and 90% interval\"))\np_post <- mcmc_areas(posterior,  prob = 0.9, point_est=\"mean\", regex_pars = c(\"alpha\", \"beta\")) + plot_title\nprint(p_post)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/diag-check-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot_title <- ggtitle(paste(\"Posterior distributions, with means and 90% interval\"))\np_post <- mcmc_areas(posterior,  prob = 0.9, point_est=\"mean\", regex_pars = c(\"gamma\", \"delta\")) + plot_title\nprint(p_post)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/diag-check-3.png){width=672}\n:::\n\n```{.r .cell-code}\nmcmc_intervals(posterior)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/diag-check-4.png){width=672}\n:::\n:::\n\nImportantly, note the wide credible intervals on $\\alpha$ and $\\gamma$. Why? See the scatter plots below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_title <- ggtitle(\"Parameter posterior sample correlation\")\np_post <- mcmc_pairs(posterior)\nprint(p_post)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/posterior-pp-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmcmc_scatter(posterior, pars=c('alpha','gamma'))\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/posterior-pp-2.png){width=672}\n:::\n:::\n\nThere is near perfect correlation between $\\alpha$ and $\\gamma$, as expected.\n\n## PPD\n\nWe next look at the Posterior Predictive Distribution (PPD) of the observations per site. That is, we plot the generated counts $Y_i$ for site $s_i$ on the sampling surface (grid). \n\nThe PPD can be expressed as the samples from the predictive distribution of $Y$ taking into account the uncertainty surrounding the parameters. The PPD can be written as\n$$\np(\\tilde{y}|Y) = \\int p(\\tilde{y}|\\lambda, b, Y)p(\\lambda, b|Y) dbd\\lambda\n$$\n\nsuch that the posterior uncertainty of the parameters is integrated out.\n\nBelow we plot the generated values of $\\tilde{y}$ for each site. Additionally, the generated quantities of intensity, bias, and intensity*bias ($\\lambda\\cdot b) per site are also plotted on the grid. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerated_vars <- c('lambda_bias', 'lambda_rep', 'b_rep', 'y_rep')\nlambda_thinned <- fit$summary(variables=generated_vars[1])$mean\nlambda_rep <- fit$summary(variables=generated_vars[2])$mean\nbias_rep <- fit$summary(variables=generated_vars[3])$mean\ny_ppd <- fit$summary(variables=generated_vars[4])$mean\nppd_df <- data.frame(x=grid_points$x, y=grid_points$y, y_rep=y_ppd, lt=lambda_thinned, l=lambda_rep, b=bias_rep)\nhead(ppd_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x y        y_rep           lt        l         b\n1 1 1 0.0000000000 2.850512e-04 239554.3  94658292\n2 2 1 0.0001666667 8.522465e-05 239720.7  23486345\n3 3 1 0.0000000000 1.147615e-04 241493.0  33039943\n4 4 1 0.0006666667 9.336254e-04 252164.3 310895084\n5 5 1 0.0001666667 4.698901e-04 287568.9 115807339\n6 6 1 0.0005000000 5.758727e-04 360459.2  97877513\n```\n:::\n:::\n\nIt is important to notice that while the thinned intensity is ostensibly realistic in estimation, the intensity and bias are not. This is due to the specification of the Thinned Poisson Process\n$$\\lambda^* = \\lambda(s)b(s)$$\nsuch that\n$$\\lambda^* = \\exp\\left[\\alpha + \\beta*X(s) + \\gamma + \\delta*Z(s)\\right]$$\n\nWe can then see the generated data in the sampling surface:\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(ppd_df, aes(x, y, fill=y_rep)) + \n    geom_tile() +\n    scale_fill_viridis(discrete=FALSE) +\n    ggtitle(\"PPD counts per site\")\nprint(p)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/viz-gen-1.png){width=672}\n:::\n\n```{.r .cell-code}\np <- ggplot(ppd_df, aes(x, y, fill=lt)) + \n    geom_tile() +\n    scale_fill_viridis(discrete=FALSE) +\n    ggtitle(\"Thinned intensity per site\")\nprint(p)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/viz-gen-2.png){width=672}\n:::\n\n```{.r .cell-code}\np <- ggplot(ppd_df, aes(x, y, fill=l)) + \n    geom_tile() +\n    scale_fill_viridis(discrete=FALSE) +\n    ggtitle(\"Intensity per site\")\nprint(p)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/viz-gen-3.png){width=672}\n:::\n\n```{.r .cell-code}\np <- ggplot(ppd_df, aes(x, y, fill=b)) + \n    geom_tile() +\n    scale_fill_viridis(discrete=FALSE) +\n    ggtitle(\"Bias per site\")\nprint(p)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/viz-gen-4.png){width=672}\n:::\n:::\n\nThe prediction of PO observatiosn at each site is realistic, as is the thinned intensity. But alone, the intensity and bias predictive disitributions are poorly estimated.\n\n\n## Correlation between coefficients in Thinned poisson process model for presence-only data.\nEDIT FROM HERE: want to say something slightly different.\nIn the above plots, we can notice that the bias and (unthinned) intensity are behaving strangely. Here we observe the effect of correlated parameters describing the behavior of the intensity and the bias the NHPP. We examine the distributions of the generated quantities using the fitted model.\n\nThe issue with the large values is both because we are taking the mean of the posterior distribution as our point estimate, and the high correlation between the two parameters causes the estimates to inversely fluctuate around each other.\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_title <- ggtitle(paste(\"Posterior distributions, with means and 90% interval\"))\np_post <- mcmc_intervals(fit$draws(),  prob = 0.9, point_est=\"mean\", regex_pars = generated_vars[1]) + plot_title\nprint(p_post)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/pp-correlation-1.png){width=672}\n:::\n\n```{.r .cell-code}\np_post <- mcmc_intervals(fit$draws(),  prob = 0.9, point_est=\"mean\", regex_pars = generated_vars[2]) + plot_title\nprint(p_post)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 53 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/pp-correlation-2.png){width=672}\n:::\n\n```{.r .cell-code}\np_post <- mcmc_intervals(fit$draws(),  prob = 0.9, point_est=\"mean\", regex_pars = generated_vars[3]) + plot_title\nprint(p_post)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 100 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/pp-correlation-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# Look at counts for each site\ngen_y <- c(\"y_rep[1]\", \"y_rep[10]\", \"y_rep[20]\")\np_post <- mcmc_hist(fit$draws(), pars=gen_y)\nprint(p_post)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/pp-correlation-4.png){width=672}\n:::\n\n```{.r .cell-code}\n# The gen parameters for just a few of the sites\ngen_lambda <- c('lambda_rep[1]', 'lambda_rep[10]', 'lambda_rep[20]')\ngen_lb <- c('lambda_bias[1]', 'lambda_bias[10]', 'lambda_bias[20]')\ngen_b <- c('b_rep[1]', 'b_rep[10]', 'b_rep[20]')\np_post <- mcmc_intervals(fit$draws(),  prob = 0.9, point_est=\"mean\", pars = gen_lambda) + plot_title\nprint(p_post)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 3 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/pp-correlation-5.png){width=672}\n:::\n\n```{.r .cell-code}\np_post <- mcmc_hist(fit$draws(), pars = gen_lambda) \nprint(p_post)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/pp-correlation-6.png){width=672}\n:::\n\n```{.r .cell-code}\np_post <- mcmc_hist(fit$draws(), pars = gen_b)\nprint(p_post)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/pp-correlation-7.png){width=672}\n:::\n\n```{.r .cell-code}\np_post <- mcmc_intervals(fit$draws(),  prob = 0.9, point_est=\"mean\", pars = gen_lb) + plot_title\nprint(p_post)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/pp-correlation-8.png){width=672}\n:::\n:::\n\nThe take away is that the mean for the generated quantities is very skewed by the occassional large value. This high skew is caused by the correlation between b and l, since these parameters are not estimable between themselves. Therefore, we arrive at reasonable estimates  for b*l since this is draw specific (where when one is high the other is low), but  the overall mean for either b or l over multiple draws cannot be trusted. This is clear from the histograms of $\\lambda$ and the bias, where most of the values take on very low values, but do fluctuate higher. And when one goes higher, the other goes lower, which I'd like to check a specific example of, for one draw.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Nuts diagnostics that I haven't tried to understand really\nnuts_fit <- nuts_params(fit)\nhead(nuts_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Chain Iteration   Parameter Value\n1     1         1 treedepth__     5\n2     1         2 treedepth__     4\n3     1         3 treedepth__     8\n4     1         4 treedepth__     7\n5     1         5 treedepth__     6\n6     1         6 treedepth__     6\n```\n:::\n\n```{.r .cell-code}\nmcmc_nuts_treedepth(nuts_fit, log_posterior(fit))\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/nuts-diag-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/nuts-diag-2.png){width=672}\n:::\n\n```{.r .cell-code}\nmcmc_nuts_acceptance(nuts_fit,  log_posterior(fit))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/nuts-diag-3.png){width=672}\n:::\n\n```{.r .cell-code}\nmcmc_parcoord(fit$  draws(), np=nuts_fit)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/nuts-diag-4.png){width=672}\n:::\n\n```{.r .cell-code}\nmcmc_violin(fit$draws(), pars = c('alpha', 'beta', 'gamma', 'delta'))\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/nuts-diag-5.png){width=672}\n:::\n\n```{.r .cell-code}\nmcmc_nuts_divergence(nuts_fit, log_posterior(fit))\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/nuts-diag-6.png){width=672}\n:::\n\n```{.r .cell-code}\nmcmc_nuts_energy(nuts_fit, binwidth=1/2)\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/nuts-diag-7.png){width=672}\n:::\n\n```{.r .cell-code}\nmcmc_rhat(rhat(fit))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Dropped 12 NAs from 'new_rhat(rhat)'.\n```\n:::\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/nuts-diag-8.png){width=672}\n:::\n\n```{.r .cell-code}\nmcmc_neff(neff_ratio(fit))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Dropped 12 NAs from 'new_neff_ratio(ratio)'.\n```\n:::\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/nuts-diag-9.png){width=672}\n:::\n:::\n::: {.cell}\n\n```{.r .cell-code}\nmcmc_acf(fit$draws(), pars=c('alpha', 'beta', 'gamma', 'delta'))\n```\n\n::: {.cell-output-display}\n![](poisson-processes_presence-only_files/figure-html/auto-corr-1.png){width=672}\n:::\n:::\n\nAutocorrelation in the chains looks well-handled.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit$cmdstan_diagnose()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nProcessing csv files: C:/Users/msavery/AppData/Local/Temp/RtmpeEH7PM/thinned_poisson_process-202404291348-1-102725.csv, C:/Users/msavery/AppData/Local/Temp/RtmpeEH7PM/thinned_poisson_process-202404291348-2-102725.csv, C:/Users/msavery/AppData/Local/Temp/RtmpeEH7PM/thinned_poisson_process-202404291348-3-102725.csv\n\nChecking sampler transitions treedepth.\nTreedepth satisfactory for all transitions.\n\nChecking sampler transitions for divergences.\nNo divergent transitions found.\n\nChecking E-BFMI - sampler transitions HMC potential energy.\nE-BFMI satisfactory.\n\nEffective sample size satisfactory.\n\nSplit R-hat values satisfactory all parameters.\n\nProcessing complete, no problems detected.\n```\n:::\n\n```{.r .cell-code}\n# Leave loo out.\n#loo_results <- fit$loo(variables=\"lp__\", cores=4)\n#print(loo_results)\n```\n:::\n\nIt appears we have no additional problems in the models according the the Stan diagnostics.\n\nWe next move on to incorporating spatial correlation. To do so, we fit a Log Gaussian Cox Process (LGCP). Where before we specified the intensity as\n$$\n\\lambda(s) = \\theta(s)b(s) = \\exp[\\alpha + \\beta'x(s) + \\gamma + \\delta'z(s)]\n$$\nwe now add a Gaussian process to incorporate spatial correlation between sites\n$$\n\\lambda(s) = \\theta(s)b(s) = \\exp[\\alpha + \\beta'x(s) + \\gamma + \\delta'z(s) + w(s)]\n$$\nso that the expected value for quadrat $A$ will be the integral over the quadrat:\n$$\n\\Delta(A) = \\int_A\\lambda(s)ds = \\int_A \\exp[\\alpha + \\beta'x(s) + \\gamma + \\delta'z(s) + w(s)]ds\n$$\nWe make the same approximations as before based on our limited covariate resolution. \n\nWhile the topic of LGCPs on its own is quite interesting and deserves its own treatment, for now we examine its behavior only as an adjustment to the NHPP. In a future post I will discuss approximations to the LGCP, which are quite important as fitting the spatial correlation matrix is computationally intensive and not practical if we will want to apply the LGCP to developing optimal designs.\n\nI proceed with the stan code.\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_string <- log_gaussian_cox_process\nwrite(model_string, model_path)\n# Here we need to use the distance matrix\ndata = list(N = sites, X = grid_points$aux_x, Z = grid_points$aux_z, y = sim_data$Y[data_reps,], D = distance_mat)\nmodel <- cmdstan_model(model_path)\nlgcp_fit <- model$sample(data=data, seed=13, chains=3, iter_sampling=2000, iter_warmup=200, thin = 10)\n```\n:::\n\n\nHaving fit the LGCP we can examine the parameters.\n```{r)\n#| label: lgcp-params\n#| eval: false\nlgcp_fit$summary(variables=c('alpha', 'beta', 'gamma', 'delta'))\n```\nAnd then we look at the posterior diagnostics.\n\n::: {.cell}\n\n```{.r .cell-code}\nposterior <- lgcp_fit$draws()\ncolor_scheme_set(\"mix-blue-pink\")\np_trace <- mcmc_trace(posterior,  pars = c(\"alpha\", \"beta\", \"gamma\", \"delta\"),\n                      facet_args = list(nrow = 2, labeller = label_parsed))\nprint(p_trace + facet_text(size = 15))\n\nplot_title <- ggtitle(paste(\"Posterior distributions, with means and 90% interval\"))\np_post <- mcmc_areas(posterior,  prob = 0.9, point_est=\"mean\", regex_pars = c(\"alpha\", \"beta\")) + plot_title\nprint(p_post)\n\nplot_title <- ggtitle(paste(\"Posterior distributions, with means and 90% interval\"))\np_post <- mcmc_areas(posterior,  prob = 0.9, point_est=\"mean\", regex_pars = c(\"gamma\", \"delta\")) + plot_title\nprint(p_post)\n\nmcmc_intervals(posterior, pars=c('alpha', 'beta', 'gamma', 'delta'))\n#mcmc_hist(fit$draws(), pars = c('alpha', 'beta', 'gamma', 'delta')) \nplot_title <- ggtitle(\"Parameter posterior sample correlation\")\np_post <- mcmc_pairs(posterior, pars=c('alpha', 'beta', 'gamma', 'delta'))\nprint(p_post)\nmcmc_scatter(posterior, pars=c('alpha','gamma'))\n```\n:::\n\nFinally look at the posterior predictions for $\\lambda$, $b$, and $\\lambda\\cdot b$.\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerated_vars <- c('lambda_bias', 'lambda_rep', 'b_rep', 'y_rep')\nlambda_thinned <- lgcp_fit$summary(variables=generated_vars[1])$mean\nlambda_rep <- lgcp_fit$summary(variables=generated_vars[2])$mean\nbias_rep <- lgcp_fit$summary(variables=generated_vars[3])$mean\ny_ppd <- lgcp_fit$summary(variables=generated_vars[4])$mean\nppd_df <- data.frame(x=grid_points$x, y=grid_points$y, y_rep=y_ppd, lt=lambda_thinned, l=lambda_rep, b=bias_rep)\nhead(ppd_df)\n```\n:::\n\nWe can then check the generated data:\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(ppd_df, aes(x, y, fill=y_rep)) + \n    geom_tile() +\n    scale_fill_viridis(discrete=FALSE) +\n    ggtitle(\"PPD counts per site\")\nprint(p)\n\np <- ggplot(ppd_df, aes(x, y, fill=lt)) + \n    geom_tile() +\n    scale_fill_viridis(discrete=FALSE) +\n    ggtitle(\"Thinned intensity per site\")\nprint(p)\n\np <- ggplot(ppd_df, aes(x, y, fill=l)) + \n    geom_tile() +\n    scale_fill_viridis(discrete=FALSE) +\n    ggtitle(\"Intensity per site\")\nprint(p)\np <- ggplot(ppd_df, aes(x, y, fill=b)) + \n    geom_tile() +\n    scale_fill_viridis(discrete=FALSE) +\n    ggtitle(\"Bias per site\")\nprint(p)\n```\n:::\n",
    "supporting": [
      "poisson-processes_presence-only_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}